import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import {
  deleteTodo,
  fetchTodos,
  patchTodo,
  postTodo,
  todoStatusChange,
} from "../../api/todosAPI";
// import { fetchCount } from './counterAPI';

const initialState = {
  todos: [],
  loading: false,
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(getTodos(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getTodos = createAsyncThunk("todos/fetch", async () =>
  fetchTodos()
);

export const addTodo = createAsyncThunk("todos/add", async (data) =>
  postTodo(data)
);

export const editTodo = createAsyncThunk("todos/edit", async (data) =>
  patchTodo(data)
);

export const removeTodo = createAsyncThunk("todos/remove", async (id) =>
  deleteTodo(id)
);

export const resolveTodo = createAsyncThunk("todos/resolve", async (data) =>
  todoStatusChange(data)
);

export const todoSlice = createSlice({
  name: "todos",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    increment: (state) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.value += 1;
    },
    decrement: (state) => {
      state.value -= 1;
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    incrementByAmount: (state, action) => {
      state.value += action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getTodos.pending, (state) => {
        state.loading = true;
      })
      .addCase(getTodos.fulfilled, (state, action) => {
        state.loading = false;
        state.todos = action.payload;
      });

    builder
      .addCase(editTodo.pending, (state) => {
        state.loading = true;
      })
      .addCase(editTodo.fulfilled, (state, action) => {
        state.loading = false;
        state.todos = state.todos.map((todo) =>
          todo.id === action.payload.id ? (todo = action.payload) : todo
        );
      });

    builder
      .addCase(addTodo.pending, (state) => {
        state.loading = true;
      })
      .addCase(addTodo.fulfilled, (state, action) => {
        state.loading = false;
        state.todos = [{ ...action.payload }, ...state.todos];
      });

    builder
      .addCase(removeTodo.pending, (state) => {
        state.loading = true;
      })
      .addCase(removeTodo.fulfilled, (state, action) => {
        state.loading = false;
        state.todos = state.todos.filter((todo) => todo.id !== action.payload);
      });

    builder
      .addCase(resolveTodo.pending, (state) => {
        state.loading = true;
      })
      .addCase(resolveTodo.fulfilled, (state, action) => {
        state.loading = false;
        state.todos = state.todos.map((todo) =>
          todo.id === action.payload.id ? (todo = action.payload) : todo
        );
      });
  },
});

export const { increment, decrement, incrementByAmount } = todoSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectCount = (state) => state.counter.value;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
export const incrementIfOdd = (amount) => (dispatch, getState) => {
  const currentValue = selectCount(getState());
  if (currentValue % 2 === 1) {
    dispatch(incrementByAmount(amount));
  }
};

export default todoSlice.reducer;
